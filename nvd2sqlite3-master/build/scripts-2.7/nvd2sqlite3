#!/usr/bin/python
#
# This little tool reads input in NIST's CVE-Feed XML format and updates a
# local sqlite3 database with that data.
#
# Copyright (c) 2013, Twitter, Inc. All rights reserved.
#
# Originally written by Jan Schaumann <jschauma@netmeister.org> in April
# 2013.

import getopt
import os
import sqlite3
import sys
import xml
import MySQLdb

import xml.etree.ElementTree as ET

DEFAULT_CVEDB_FILE="/var/db/cvedb"

EXIT_ERROR = 1
EXIT_SUCCESS = 0

NAMESPACES = {
    'def'  : 'http://scap.nist.gov/schema/feed/vulnerability/2.0',
    'vuln' : 'http://scap.nist.gov/schema/vulnerability/0.4',
    'cvss' : 'http://scap.nist.gov/schema/cvss-v2/0.2'
}


###
### Classes
###

class CVE(object):
    """A simple CVE object.  Its fields are 'interesting' bits of
    information about a CVE."""

    def __init__(self):
        """Construct a CVE with default values."""
        self.vulnfields = [ "last-modified-datetime",
                            "published-datetime",
                            "summary" ]
        self.cvssfields = [ "access-complexity",
                            "access-vector",
                            "authentication",
                            "availability-impact",
                            "confidentiality-impact",
                            "integrity-impact",
                            "score" ]
        self.data = {}
        for field in self.vulnfields + self.cvssfields:
            self.data[field] = ""
        self.data['refs'] = []
        self.data['vulnerable-software-list'] = []


    def __repr__(self):
        descr = "%s\n" % self.data['id']
        keys = self.data.keys()
        keys.sort()
        for k in keys:
            descr += "%s : %s\n" % (k.ljust(25), self.data[k])

        return descr


class CVEDB(object):
    """A simple class representing the cvedb tool."""

    def __init__(self):
        """Construct a new CVEDB with defaults."""

        self.dbfile = DEFAULT_CVEDB_FILE
        self.verbosity = 0


    class Usage(Exception):
        """A simple exception that provides a usage statement and a return
        code."""

        def __init__(self, rval):
            self.err = rval
            self.msg = 'Usage: %s [-hv] [-d dbfile]\n' % os.path.basename(sys.argv[0])
            self.msg += '\t-d dbfile  update this database\n'
            self.msg += '\t-h         print this message and exit\n'
            self.msg += '\t-v         increase verbosity\n'


    def createDB(self):
        """Create a DB with the correct schema."""

        self.verbose("Creating new database as '%s'..." % self.dbfile)
        try:
            conn = sqlite3.connect(self.dbfile)
#	    conn = MySQLdb.connect("localhost","root","root","cvedata")
            c = conn.cursor()
            c.execute("CREATE TABLE nvd (access_vector varchar(255),access_complexity varchar(255),authentication varchar(255),availability_impact varchar(255),confidentiality_impact varchar(255),cve_id varchar(255),integrity_impact varchar(255),last_modified_datetime varchar(255),published_datetime varchar(255),score real,summary varchar(255),urls varchar(255),vulnerable_software_list varchar(255))")
            conn.commit()
        except sqlite3.Error, e:
            sys.stderr.write("Unable to create DB file '%s'.\n" % self.dbfile)
            sys.stderr.write("I'd love to tell you why, but the python sqlite3 module does not expose the error codes.\n")
            sys.stderr.write("I'm guessing permissions problems.\n")
            sys.exit(EXIT_ERROR)
            # NOTREACHED


    def cveInDB(self, cve, conn):
        """Check if we have the given CVE already in our database.
           Input: a CVE object and an open sqlite connection.
           Returns true or false."""

        rval = True
        word = "already"
        self.verbose("Checking if %s is in the DB..." % cve.data['id'], 2)
        c = conn.cursor()
        c.execute('SELECT cve_id FROM nvd where cve_id=?', (cve.data['id'],))
        if c.fetchone() is None:
            rval = False
            word = "not"

        self.verbose("%s %s in DB." % (cve.data['id'], word), 3)
        return rval


    def insertCVE(self, cve, conn):
        """Insert a new CVE into the given database connection."""

        self.verbose("Inserting %s into DB..." % cve.data['id'], 2)
        try:
            conn.execute("INSERT INTO nvd VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)",
                        (cve.data['access-vector'],
                         cve.data['access-complexity'],
                         cve.data['authentication'],
                         cve.data['availability-impact'],
                         cve.data['confidentiality-impact'],
                         cve.data['id'],
                         cve.data['integrity-impact'],
                         cve.data['last-modified-datetime'],
                         cve.data['published-datetime'],
                         cve.data['score'],
                         cve.data['summary'],
                         ",".join(cve.data['refs']),
                         ",".join(cve.data['vulnerable-software-list'])))
            conn.commit()
        except sqlite3.Error, e:
            sys.stderr.write("Unable to insert %s into DB.\n" % cve.data['id'])
            sys.stderr.write(e.args[0] + '\n')


    def parseInput(self):
        """Read input (yes, all in one), and parse as XML.
           Operates on stdin, returns an xml.etree.ElementTree"""

        self.verbose("Parsing input as XML...")
        print "Parsing input as XML..."
        try:
            tree = ET.parse(sys.stdin)
        except xml.parsers.expat.ExpatError, e:
            sys.stderr.write("Unable to parse input as valid XML: %s\n" % e.args[0])
            sys.exit(EXIT_ERROR)
            # NOTREACHED

        return tree


    def parseOptions(self, inargs):
        """Parse given command-line optoins and set appropriate
        attributes.

        Arguments:
            inargs -- arguments to parse

        Raises:
            Usage -- if '-h' or invalid command-line args are given
        """

        try:
            opts, args = getopt.getopt(inargs, "d:hv")
        except getopt.GetoptError:
            raise self.Usage(EXIT_ERROR)

        for o, a in opts:
            if o in ("-d"):
                self.dbfile = a
            if o in ("-h"):
                raise self.Usage(EXIT_SUCCESS)
            if o in ("-v"):
                self.verbosity += 1

        if args:
            raise self.Usage(EXIT_ERROR)


    def updateDB(self, xml):
        self.verbose("Opening database...")
        try:
            conn = sqlite3.connect(self.dbfile)
        except sqlite3.Error, e:
            sys.stderr.write("Unable to open DB file '%s'.\n" % self.dbfile)
            sys.stderr.write("I'd love to tell you why, but the python sqlite3 module does not expose the error codes.\n")
            sys.stderr.write("I'm guessing permissions problems.\n")
            sys.exit(EXIT_ERROR)
            # NOTREACHED

        self.verbose("Walking XML tree...")
        print "Walking XML tree..."
        root = xml.getroot()
        for child in root.findall('./{%s}entry' % NAMESPACES['def']):
            cve = CVE()
            cve.data['id'] = child.attrib['id']

            self.verbose("Processing %s..." % cve.data['id'], 2)
            print "Processing %s..." % cve.data['id']

            for field in cve.vulnfields:
                node = child.find('./{%s}%s' % (NAMESPACES['vuln'], field))
                cve.data[field] = node.text

            swlist = child.find('./{%s}vulnerable-software-list' % NAMESPACES['vuln'])
            if swlist is not None:
                for sw in swlist.findall('./{%s}product' % NAMESPACES['vuln']):
                    cve.data['vulnerable-software-list'].append(sw.text)

            for ref in child.findall('./{%s}references' % NAMESPACES['vuln']):
                r = ref.find('./{%s}reference' % NAMESPACES['vuln'])
                if r is not None:
                    cve.data['refs'].append(r.attrib['href'])

            cvss = child.find('./{%s}cvss/{%s}base_metrics' % (NAMESPACES['vuln'],
                                                                NAMESPACES['cvss']))
            if cvss is not None:
                for field in cve.cvssfields:
                    node = cvss.find('./{%s}%s' % (NAMESPACES['cvss'], field))
                    if node is not None:
                        cve.data[field] = node.text
                    else:
                        sys.stderr.write("Unable to find cvss field '%s' for %s" % (field, cve.data['id']))

            if not self.cveInDB(cve, conn):
                self.insertCVE(cve, conn)

        conn.close()


    def verbose(self, msg, level=1):
        """Print given message to STDERR if the object's verbosity is >=
        the given lefel."""

        if (self.verbosity >= level):
            sys.stderr.write("%s> %s\n" % ('=' * level, msg))

###
### "Main"
###

if __name__ == "__main__":
    try:
        cvedb = CVEDB()
        try:
            cvedb.parseOptions(sys.argv[1:])
            if not os.path.exists(cvedb.dbfile):
                cvedb.createDB()
            xml = cvedb.parseInput()
            cvedb.updateDB(xml)

        except cvedb.Usage, u:
            if (u.err == EXIT_ERROR):
                out = sys.stderr
            else:
                out = sys.stdout
            out.write(u.msg)
            sys.exit(u.err)
	        # NOTREACHED

    except KeyboardInterrupt:
        # catch ^C, so we don't get a "confusing" python trace
        sys.exit(EXIT_ERROR)
